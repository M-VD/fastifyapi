import mongoose from 'mongoose'
import dotenv from 'dotenv'
dotenv.config()
import supertest from 'supertest'
import createServer from '../utils/server'
import * as UserService from '../service/user.service'
import * as SessionService from '../service/session.service'
import { nanoid } from 'nanoid'
import { createUserSessionHandler } from '../controller/session.controller'
import app from '../app'

/* const app = createServer() */

const userId = new mongoose.Types.ObjectId().toString()
const api = supertest(app)
const userPayload = {
  _id: userId,
  email: 'test@example.com',

  firstName: 'Jane',

  lastName: 'Doe',

  password: 'Password123',

  verificationCode: nanoid(),
  verified: false,
  passwordResetCode: null,
}

const userInput = {
  email: 'test@example.com',
  firstName: 'Jane',
  lastName: 'Doe',
  password: 'Password123',
  passwordConfirmation: 'Password123',
}
const userSession = {
  accessToken:
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2MzM0NDI2YjY1NmVkZjU0MjI1MmViYWMiLCJzZXNzaW9uSUQiOiI2MzM0NDI3OTY1NmVkZjU0MjI1MmViYWYiLCJpYXQiOjE2NjQzNjkyNzMsImV4cCI6MTY2NDM3MDE3M30.DA4A6oYiFiUY8RWctMTeBzSdxub3CvgwH9A1Xn7W5HA',
  refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.',
}
const userInputSession = {
  email: 'test@example.com',

  password: 'Password123',
}
const sessionPayload = {
  _id: new mongoose.Types.ObjectId().toString(),
  user: userId,
  valid: true,
  userAgent: 'PostmanRuntime/7.29.2',
  createdAt: new Date(),
  updatedAt: new Date(),
}

beforeAll(async () => {
  await mongoose.disconnect()
  await mongoose.connect(process.env.MONGOURI_TEST || '')
})
afterAll(async () => {
  await mongoose.disconnect()
})

/* beforeEach(async () => {})

afterEach(() => {}) */

describe('user', () => {
  // user registration

  describe('user registration', () => {
    describe('given the username and password are valid', () => {
      it('should return the user payload', async () => {
        const createUserServiceMock = jest
          .spyOn(UserService, 'createUser')
          // @ts-ignore
          .mockReturnValueOnce(userPayload)

        const { statusCode, body } = await api
          .post('/api/users')
          .send(userInput)

        expect(statusCode).toBe(200)

        expect(body).toEqual(userPayload)
        expect(createUserServiceMock).toHaveBeenCalledTimes(1)
        expect(createUserServiceMock).toHaveBeenCalledWith(userInput)
      })
    })

    describe('given the passwords do not match', () => {
      it('should return a 400', async () => {
        const createUserServiceMock = jest
          .spyOn(UserService, 'createUser')
          // @ts-ignore
          .mockReturnValueOnce(userPayload)

        const { statusCode } = await supertest(app)
          .post('/api/users')
          .send({ ...userInput, passwordConfirmation: 'doesnotmatch' })

        expect(statusCode).toBe(400)

        expect(createUserServiceMock).not.toHaveBeenCalled()
      })
    })

    describe('given the user service throws', () => {
      it('should return a 409 error', async () => {
        const createUserServiceMock = jest
          .spyOn(UserService, 'createUser')
          .mockRejectedValueOnce('Oh no! :(')

        const { statusCode } = await api.post('/api/users').send(userInput)

        expect(statusCode).toBe(409)

        expect(createUserServiceMock).toHaveBeenCalled()
      })
    })
  })

  describe('create user session', () => {
    describe('given the username and password are valid', () => {
      it('should return a signed accessToken & refresh token', async () => {
        //const createUserServiceMock = jest
        /* jest
          .spyOn(SessionService, 'validatePassword')
          // @ts-ignore
          .mockReturnValue(userPayload)*/

        jest
          .spyOn(SessionService, 'createSession')
          // @ts-ignore
          .mockReturnValueOnce(sessionPayload)

        const { statusCode, body } = await api
          .post('/api/sessions')
          // @ts-ignore
          .send(userInputSession)

        expect(body).toEqual(sessionPayload)
      })
      /*    const req = {
          get: () => {
            return 'a user agent'
          },
          body: {
            email: 'test@example.com',
            password: 'Password123',
          },
        } */

      /*   const send = jest.fn()

        const res = {
          send,
        }
 */
      // @ts-ignore
      /*       await createUserSessionHandler(req, res)
        expect(createUserServiceMock).toHaveBeenCalledTimes(1)
        expect(send).toHaveBeenCalledWith({
          accessToken: expect.any(String),
          refreshToken: expect.any(String),
        }) */
    })
  })
})
